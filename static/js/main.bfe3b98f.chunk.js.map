{"version":3,"sources":["core/types.ts","logo.svg","core/config.ts","core/queries.ts","core/anilist.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MediaSeason","MediaType","MediaFormat","config","queryMediaBySeason","fetchMediaPageBySeason","season","seasonYear","page","perPage","a","variables","fetchData","res","console","error","query","url","options","method","headers","Accept","body","JSON","stringify","fetch","json","log","App","useState","setData","useEffect","SUMMER","result","queryData","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0JAAYA,EAOAC,EAKAC,E,sECZG,MAA0B,iCCA5BC,G,MACJ,+BCAIC,EAAkB,6uBCSxB,SAAeC,EAAtB,wC,4CAAO,WACHC,EACAC,EACAC,EACAC,GAJG,iBAAAC,EAAA,6DAMWN,EACRO,EAAY,CACdL,SACAC,aACAC,OACAC,WAXD,kBAemBG,EATRR,6uBASyBO,GAfpC,cAeOE,EAfP,yBAgBQA,GAhBR,uCAkBCC,QAAQC,MAAR,MAlBD,kF,+BAuBQH,E,gFAAf,WACII,EACAL,GAFJ,mBAAAD,EAAA,6DAIUO,EAAMd,EACNe,EAAuB,CACzBC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,OAAQ,oBAEZC,KAAMC,KAAKC,UAAU,CACjBR,QACAL,eAbZ,kBAkB0Bc,MAAMR,EAAKC,GAlBrC,cAkBcL,EAlBd,gBAmBqBA,EAAIa,OAnBzB,iFAqBQZ,QAAQa,IAAR,MArBR,mF,gCJjCY3B,K,gBAAAA,E,gBAAAA,E,gBAAAA,E,aAAAA,M,cAOAC,K,cAAAA,E,eAAAA,M,cAKAC,K,QAAAA,E,oBAAAA,E,cAAAA,E,kBAAAA,E,UAAAA,E,UAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,qBAAAA,M,gBKgCG0B,MAtCf,WACI,MAAwBC,mBAAS,IAAjC,mBAAaC,GAAb,WAiBA,OAfAC,qBAAU,WAAM,4CACZ,4BAAArB,EAAA,sEACyBL,EACjBL,EAAYgC,OACZ,KACA,EACA,IALR,OACUC,EADV,OAOIH,EAAQG,GACRnB,QAAQa,IAAIJ,KAAKC,UAAUS,IAR/B,4CADY,uBAAC,WAAD,wBAYZC,KACD,IAGC,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACS,+CADT,0BAGA,mBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJR,+BCfDC,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.bfe3b98f.chunk.js","sourcesContent":["export enum MediaSeason {\n    WINTER = \"WINTER\",\n    SPRING = \"SPRING\",\n    SUMMER = \"SUMMER\",\n    FALL = \"FALL\",\n}\n\nexport enum MediaType {\n    ANIME = \"ANIME\",\n    MANGA = \"MANGA\",\n}\n\nexport enum MediaFormat {\n    TV = \"TV\",\n    TV_SHORT = \"TV_SHORT\",\n    MOVIE = \"MOVIE\",\n    SPECIAL = \"SPECIAL\",\n    OVA = \"OVA\",\n    ONA = \"ONA\",\n    MUSIC = \"Music\",\n    MANGA = \"Manga\",\n    NOVEL = \"NOVEL\",\n    ONE_SHOT = \"ONE_SHOT\",\n}\n\nexport interface Page {\n    media: Media[];\n    pageInfo: PageInfo;\n}\n\nexport interface PageInfo {\n    currentPage: number;\n    hasNextPage: boolean;\n    lastPage: number;\n    perPage: number;\n    total: number;\n}\n\nexport interface Media {\n    id: number;\n    title: {\n        romaji: string;\n        english: string;\n    };\n    type: MediaType;\n    format: MediaFormat;\n    description: string;\n    coverImage: {\n        extraLarge: string;\n        large: string;\n        medium: string;\n    };\n    bannerImage: string;\n    episodes?: number;\n    chapters?: number;\n    volumes?: number;\n    genres: string[];\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const config = {\n    url: \"https://graphql.anilist.co/\",\n};\n","// Query.Media(season: MediaSeason, seasonYear: Int)\nexport const queryMediaBySeason = `\nquery ($page: Int, $perPage: Int, $season: MediaSeason, $seasonYear: Int) {\n    Page (page: $page, perPage: $perPage) {\n        pageInfo {\n          total\n          currentPage\n          lastPage\n          hasNextPage\n          perPage\n        }\n\n        media (season: $season, seasonYear: $seasonYear, isAdult: false) {\n            id\n            title {\n                romaji\n                english\n            }\n            type\n            format\n            description\n            coverImage {\n                extraLarge\n                large\n                medium\n            }\n            bannerImage\n            episodes\n            chapters\n            volumes\n            genres\n        }\n    }\n}\n`;\n","/**\n * AniList info\n * GraphQL API must be fetched using POST method;\n * API has limit of 90 calls per minute;\n */\n\nimport { config } from \"./config\";\nimport { queryMediaBySeason } from \"./queries\";\nimport { MediaSeason, Page } from \"./types\";\n\nexport async function fetchMediaPageBySeason(\n    season: MediaSeason,\n    seasonYear: number,\n    page: number,\n    perPage: number\n): Promise<Page> {\n    const query = queryMediaBySeason;\n    const variables = {\n        season,\n        seasonYear,\n        page,\n        perPage,\n    };\n\n    try {\n        const res = await fetchData(query, variables);\n        return res as Page;\n    } catch (error) {\n        console.error(error);\n        return error;\n    }\n}\n\nasync function fetchData(\n    query: string,\n    variables: Record<string, unknown>\n): Promise<unknown> {\n    const url = config.url;\n    const options: RequestInit = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n        body: JSON.stringify({\n            query,\n            variables,\n        }),\n    };\n\n    try {\n        const res = await fetch(url, options);\n        return await res.json();\n    } catch (error) {\n        console.log(error);\n        return error;\n    }\n}\n","import { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { fetchMediaPageBySeason } from \"./core/anilist\";\nimport { MediaSeason, Page } from \"./core/types\";\n\nfunction App(): JSX.Element {\n    const [data, setData] = useState({} as Page);\n\n    useEffect(() => {\n        async function queryData(): Promise<void> {\n            const result = await fetchMediaPageBySeason(\n                MediaSeason.SUMMER,\n                2021,\n                1,\n                10\n            );\n            setData(result);\n            console.log(JSON.stringify(result));\n        }\n\n        queryData();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}