{"version":3,"sources":["logo.svg","core/config.ts","core/anilist.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","fetchData","query","variables","a","url","options","method","headers","Accept","body","JSON","stringify","fetch","res","json","console","log","App","useState","data","setData","useEffect","id","result","queryData","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAAe,MAA0B,iCCA5BA,G,MACJ,+BCGF,SAAeC,EAAtB,oC,4CAAO,WACHC,EACAC,GAFG,mBAAAC,EAAA,6DAIGC,EAAML,EACNM,EAAuB,CACzBC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,OAAQ,oBAEZC,KAAMC,KAAKC,UAAU,CACjBV,QACAC,eAbL,kBAkBmBU,MAAMR,EAAKC,GAlB9B,cAkBOQ,EAlBP,gBAmBcA,EAAIC,OAnBlB,iFAqBCC,QAAQC,IAAR,MArBD,mF,iCCmDQC,MAlDf,WACI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA0BA,OAxBAC,qBAAU,WACN,IAAMpB,EAAK,0gBAWLC,EAAY,CACdoB,GAAI,OAbI,4CAgBZ,4BAAAnB,EAAA,sEACyBH,EAAUC,EAAOC,GAD1C,OACUqB,EADV,OAEIH,EAAQG,GAFZ,4CAhBY,0DAqBZC,KACD,IAGC,sBAAKC,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACS,+CADT,0BAGA,mBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJR,4BASJ,8BACI,0CAAarB,KAAKC,UAAUQ,YCjC7Ba,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.7f1e1b6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const config = {\n    url: \"https://graphql.anilist.co/\",\n};\n","// always use POST\n\nimport { config } from \"./config\";\n\nexport async function fetchData(\n    query: string,\n    variables: Record<string, unknown>\n): Promise<string> {\n    const url = config.url;\n    const options: RequestInit = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n        body: JSON.stringify({\n            query,\n            variables,\n        }),\n    };\n\n    try {\n        const res = await fetch(url, options);\n        return await res.json();\n    } catch (error) {\n        console.log(error);\n        return error;\n    }\n}\n","import { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { fetchData } from \"./core/anilist\";\n\nfunction App(): JSX.Element {\n    const [data, setData] = useState(\"\");\n\n    useEffect(() => {\n        const query = `query ($id: Int) { # Define which variables will be used in the query (id)\n                            Media (id: $id, type: ANIME) { # Insert our variables into the query arguments (id) (type: ANIME is hard-coded in the query)\n                                id\n                                title {\n                                romaji\n                                english\n                                native\n                                }\n                            }\n                        }`;\n\n        const variables = {\n            id: 15125,\n        };\n\n        async function queryData(): Promise<void> {\n            const result = await fetchData(query, variables);\n            setData(result);\n        }\n\n        queryData();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n            <div>\n                <p>Data is: {JSON.stringify(data)}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}