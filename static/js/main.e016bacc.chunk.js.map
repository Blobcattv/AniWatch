{"version":3,"sources":["logo.svg","core/config.ts","core/crypt.ts","core/authentication.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","decrypt","encryptedMsg","AES","toString","CryptoJS","enc","Utf8","fetchMALToken","clientSecret","authorizationCode","a","url","concat","client_id","redirect_uri","code_challenge","fetch","response","text","authenticate","response_type","state","length","code_challenge_method","options","method","body","JSON","stringify","headers","generateCodeVerifier","uuid","uuidv4","replaceAll","App","useState","token","setToken","queryString","window","location","search","code","URLSearchParams","get","useEffect","console","log","globalConfig","tkn","fetchToken","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kbAAe,MAA0B,iC,kBCA5BA,EAEL,2FAFKA,EAIL,mI,mCCDD,SAASC,EAAQC,GACpB,OAAOC,IAAIF,QAAQC,EAAc,kBAAkBE,SAC/CC,IAASC,IAAIC,MCQd,SAAeC,EAAtB,sC,4CAAO,WACHC,EACAC,EACAV,GAHG,iBAAAW,EAAA,6DAWHC,GADAA,GADAA,GADAA,GADAA,GADAA,GADIA,EALD,4CAMOC,OAAJ,oBAAwBZ,EAAQD,EAAOc,cACnCD,OAAJ,wBAA4BJ,KACxBI,OAAJ,kCACIA,OAAJ,eAAmBH,KACfG,OAAJ,uBAA2Bb,EAAOe,gBAC9BF,OAAJ,wBAA4Bb,EAAOgB,iBAXtC,SAaoBC,MAAML,GAb1B,cAaGM,EAbH,iBAcUA,EAASC,OAdnB,sF,sBAqBA,SAAeC,EAAtB,kC,4CAAO,WAA4BpB,GAA5B,iBAAAW,EAAA,6DAIHC,GADAA,GADAA,GADIA,EADD,gDAEOC,OAAJ,wBAA4Bb,EAAOqB,iBAC/BR,OAAJ,qBAAyBb,EAAOc,aAC5BD,OAAJ,0BAA8Bb,EAAOgB,iBAEvChB,EAAOsB,QACPV,EAAMA,EAAIC,OAAJ,iBAAqBb,EAAOsB,SAGlCtB,EAAOe,cAAgBf,EAAOe,aAAaQ,OAAS,IACpDX,EAAMA,EAAIC,OAAJ,wBAA4Bb,EAAOe,gBAGzCf,EAAOwB,wBACPZ,EAAMA,EAAIC,OAAJ,iCACwBb,EAAOwB,yBAInCC,EAAuB,CACzBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU7B,GACrB8B,QAAS,CAAE,eAAgB,qBAvB5B,UAyBGb,MAAML,EAAKa,GAzBd,6C,sBA0CP,SAASM,IAIL,IAHA,IAEIC,EAAO,GACJA,EAAKT,OAHM,IAKdS,GADAA,GAAQC,eACIC,WAAW,IAAK,IAEhC,OAAOF,E,WCjBIG,MAvDf,WACI,MAAiBC,mBDkDwB,CACrCf,cAAe,OACfP,UAAWb,EAAQD,GACnBe,aAAc,2CACdC,eAAsCe,IACtCP,sBAAuB,UCvDpBxB,EAAP,oBACA,EAA0BoC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAcC,OAAOC,SAASC,OAE9BC,EADS,IAAIC,gBAAgBL,GACfM,IAAI,QAyBxB,OAvBAC,qBAAU,WAAM,4CACZ,4BAAAnC,EAAA,0DACQ0B,EADR,oDAKSM,EALT,uBAMQI,QAAQC,IAAI,+BANpB,SAOc5B,EAAapB,GAP3B,wDAWsBQ,EACdP,EAAQgD,GACRN,EACA3C,GAdR,OAWUkD,EAXV,OAgBIZ,EAASY,GAhBb,6CADY,uBAAC,WAAD,wBAoBZC,MAIA,sBAAKC,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACS,+CADT,0BAGA,mBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJR,4BASJ,gCACI,4CAAe9B,KAAKC,UAAU7B,MAC9B,2CAAcqC,YC7CfsB,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.e016bacc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const config = {\n    encryptedClientId:\n        \"U2FsdGVkX1/RPPBUzns7VzAVnbzsOZXr8Y7JLLVbNEZ1MaeDWaLfkPQWQUF9E3O+3Bxu9NADtT4YMm3fYThw5g==\",\n    encryptedClientSecret:\n        \"U2FsdGVkX18luhw/YIfjgSz+eRTzeUlegqwdQudsqkmyhQt9n6f0apnpv9VENpD/BG6CGLBsqV//xr2KKEGZLzArOMaUwgKZONMqk1siN5lnI6lRT8jZL5Vi0s01WiFq\",\n};\n","import AES from \"crypto-js/aes\";\nimport CryptoJS from \"crypto-js\";\n\nexport function decrypt(encryptedMsg: string): string {\n    return AES.decrypt(encryptedMsg, \"dKsABJ9qVfHPR3\").toString(\n        CryptoJS.enc.Utf8\n    );\n}\n","import { v4 as uuidv4 } from \"uuid\";\nimport { config } from \"./config\";\nimport { decrypt } from \"./crypt\";\n\nexport interface AuthConfig {\n    response_type: string;\n    client_id: string;\n    state?: string;\n    redirect_uri?: string;\n    code_challenge: string;\n    code_challenge_method?: string;\n}\n\nexport async function fetchMALToken(\n    clientSecret: string,\n    authorizationCode: string,\n    config: AuthConfig\n): Promise<string> {\n    let url = `https://myanimelist.net/v1/oauth2/token?`;\n    url = url.concat(`client_id=${decrypt(config.client_id)}`);\n    url = url.concat(`client_secret=${clientSecret}`);\n    url = url.concat(`grant_type=authorization_code`);\n    url = url.concat(`code=${authorizationCode}`);\n    url = url.concat(`redirect_uri=${config.redirect_uri}`);\n    url = url.concat(`code_verifier=${config.code_challenge}`);\n\n    const response = await fetch(url);\n    return await response.text();\n}\n\n/**\n * Authenticates against MyAnimeList; will reroute to config.redirect_uri which in turn will set queryParam 'code' on redirect_uri webpage\n * @param config configuration for authentication request\n */\nexport async function authenticate(config: AuthConfig): Promise<void> {\n    let url = `https://myanimelist.net/v1/oauth2/authorize?`;\n    url = url.concat(`response_type=${config.response_type}`);\n    url = url.concat(`&client_id=${config.client_id}`);\n    url = url.concat(`&code_challenge=${config.code_challenge}`);\n\n    if (config.state) {\n        url = url.concat(`&state=${config.state}`);\n    }\n\n    if (config.redirect_uri && config.redirect_uri.length > 0) {\n        url = url.concat(`&redirect_uri=${config.redirect_uri}`);\n    }\n\n    if (config.code_challenge_method) {\n        url = url.concat(\n            `&code_challenge_method=${config.code_challenge_method}`\n        );\n    }\n\n    const options: RequestInit = {\n        method: \"POST\",\n        body: JSON.stringify(config),\n        headers: { \"Content-Type\": \"application/json\" },\n    };\n    await fetch(url, options);\n}\n\nexport function getAuthenticationConfig(): AuthConfig {\n    const authenticationConfig: AuthConfig = {\n        response_type: \"code\",\n        client_id: decrypt(config.encryptedClientId),\n        redirect_uri: \"https://minatore0712.github.io/AniWatch/\",\n        code_challenge: generateCodeChallenge(generateCodeVerifier()),\n        code_challenge_method: \"plain\",\n    };\n    return authenticationConfig;\n}\n\n/**\n * generates code_verifier for PKCE\n */\nfunction generateCodeVerifier(): string {\n    const minLength = 43;\n\n    let uuid = \"\";\n    while (uuid.length < minLength) {\n        uuid += uuidv4();\n        uuid = uuid.replaceAll(\"-\", \"\");\n    }\n    return uuid;\n}\n\n/**\n * generates code_challenge for PKCE.\n * MyAnimeList oly supports 'plain' code_challenge which means an unmodified code_verifier.\n * @param codeVerifier code_verifier for which a code_challenge should be generated.\n */\nfunction generateCodeChallenge(codeVerifier: string): string {\n    return codeVerifier;\n}\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n    AuthConfig,\n    authenticate,\n    fetchMALToken,\n    getAuthenticationConfig,\n} from \"./core/authentication\";\nimport * as globalConfig from \"./core/config\";\nimport { decrypt } from \"./core/crypt\";\n\nfunction App(): JSX.Element {\n    const [config] = useState<AuthConfig>(getAuthenticationConfig());\n    const [token, setToken] = useState(\"\");\n\n    const queryString = window.location.search;\n    const params = new URLSearchParams(queryString);\n    const code = params.get(\"code\");\n\n    useEffect(() => {\n        async function fetchToken(): Promise<void> {\n            if (token) {\n                return;\n            }\n\n            if (!code) {\n                console.log(\"authentication code not set\");\n                await authenticate(config);\n                return;\n            }\n\n            const tkn = await fetchMALToken(\n                decrypt(globalConfig.config.encryptedClientSecret),\n                code,\n                config\n            );\n            setToken(tkn);\n        }\n\n        fetchToken();\n    });\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n            <div>\n                <p>Config is: {JSON.stringify(config)}</p>\n                <p>Token is: {token}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}